From 975f85e36a868eb6c743d1df5f5829227bc42e8e Mon Sep 17 00:00:00 2001
From: KennyTV <kennytv@t-online.de>
Date: Fri, 13 Mar 2020 22:24:10 +0100
Subject: [PATCH] Reduce packet exception exploits


diff --git a/protocol/src/main/java/net/luminu/CachedExceptions.java b/protocol/src/main/java/net/luminu/CachedExceptions.java
new file mode 100644
index 00000000..797fb8da
--- /dev/null
+++ b/protocol/src/main/java/net/luminu/CachedExceptions.java
@@ -0,0 +1,8 @@
+package net.luminu;
+
+import net.md_5.bungee.protocol.FastDecoderException;
+
+public final class CachedExceptions {
+
+    public static final FastDecoderException DECODER_EXCEPTION = new FastDecoderException("CACHED");
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 6c3c7ab8..9d289d79 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -53,6 +53,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
 
                 if ( in.isReadable() )
                 {
+                    if (protocol != Protocol.GAME) throw net.luminu.CachedExceptions.DECODER_EXCEPTION; // Luminu - reduce packet exceptions
                     throw new BadPacketException( "Did not read all bytes from packet " + packet.getClass() + " " + packetId + " Protocol " + protocol + " Direction " + prot.getDirection() );
                 }
             } else
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index 743d65e4..59d70ec7 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -50,6 +50,6 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
             }
         }
 
-        throw new CorruptedFrameException( "length wider than 21-bit" );
+        throw net.luminu.CachedExceptions.DECODER_EXCEPTION; // Luminu - reduce packet exceptions
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 29a317a7..9f4379a8 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -352,6 +352,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 }
                 break;
             default:
+                if (true) throw net.luminu.CachedExceptions.DECODER_EXCEPTION; // Luminu - reduce packet exceptions
                 throw new IllegalArgumentException( "Cannot request protocol " + handshake.getRequestedProtocol() );
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 989bfd87..8fb28826 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -124,7 +124,7 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
     {
         if ( ctx.channel().isActive() )
         {
-            boolean logExceptions = !( handler instanceof PingHandler );
+            boolean logExceptions = !( handler instanceof PingHandler || handler instanceof InitialHandler ); // Luminu - reduce packet exceptions
 
             if ( logExceptions )
             {
-- 
2.26.0.windows.1

