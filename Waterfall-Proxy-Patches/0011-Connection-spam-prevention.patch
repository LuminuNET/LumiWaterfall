From a5d7563497714523726b5f18872d6ed72ea1f133 Mon Sep 17 00:00:00 2001
From: KennyTV <kennytv@t-online.de>
Date: Sat, 21 Mar 2020 19:50:42 +0100
Subject: [PATCH] Connection spam prevention


diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index c343b5a2..b79096c2 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -231,6 +231,7 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandIP() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
+        getPluginManager().registerCommand(null, new net.md_5.bungee.command.CommandSpamFilter()); // Luminu - connection spam prevention
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java b/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java
new file mode 100644
index 00000000..b8afba4e
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java
@@ -0,0 +1,67 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.connection.BlockedConnections;
+
+import java.util.Map;
+
+// Luminu - connection spam prevention
+public final class CommandSpamFilter extends Command {
+
+    public CommandSpamFilter() {
+        super("spamfilter", "command.spamfilter");
+        BlockedConnections.getInstance().reload();
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args) {
+        BlockedConnections blockedConnections = BlockedConnections.getInstance();
+        if (args.length == 0) {
+            sender.sendMessage("/spamfilter <console/list/clean/empty/reload>");
+        } else if (args.length == 1) {
+            switch (args[0]) {
+                case "console":
+                    for (Map.Entry<String, BlockedConnections.SpamInfo> entry : blockedConnections.getBlocked().entrySet()) {
+                        if (entry.getValue().isKilled()) {
+                            System.out.println(entry);
+                        }
+                    }
+                    sender.sendMessage("dumped to console");
+                    break;
+                case "list":
+                    sender.sendMessage("blocked:");
+                    for (Map.Entry<String, BlockedConnections.SpamInfo> entry : blockedConnections.getBlocked().entrySet()) {
+                        if (entry.getValue().isKilled()) {
+                            sender.sendMessage(entry.toString());
+                        }
+                    }
+                    break;
+                case "clean":
+                    // Remove non kill-switched with 30 seconds of no activity
+                    blockedConnections.getBlocked().entrySet().removeIf(next -> !next.getValue().isKilled() && System.currentTimeMillis() - next.getValue().getLastConnect() > 45_000);
+                    sender.sendMessage("cleaned");
+                    break;
+                case "empty":
+                    // Remove all cached
+                    blockedConnections.getBlocked().clear();
+                    sender.sendMessage("emptied blocked cached");
+                    break;
+                case "reload":
+                    blockedConnections.reload();
+                    sender.sendMessage("reloaded");
+                    break;
+            }
+        } else if (args.length == 2) {
+            if (args[0].equalsIgnoreCase("remove")) {
+                blockedConnections.getBlocked().entrySet().removeIf(entry -> {
+                    final boolean toRemove = entry.getValue().getNames().contains(args[1]);
+                    if (toRemove) {
+                        sender.sendMessage("removed " + entry.getValue().getNames());
+                    }
+                    return toRemove;
+                });
+            }
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java b/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java
new file mode 100644
index 00000000..3f5a4a66
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java
@@ -0,0 +1,152 @@
+package net.md_5.bungee.connection;
+
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+// Luminu - connection spam prevention
+public final class BlockedConnections {
+
+    private static final BlockedConnections INSTANCE = new BlockedConnections();
+
+    // Pre handler creation
+    private static final long WARN_DELAY = 3000;
+    private static final long CHECK_CONNECTIONS_DELAY = 1500;
+    private final List<Long> connections = new ArrayList<>();
+    private long connectionLimitSpan; // timespan to limit connections in
+    private int connectionLimit = -1; // how many connections are allowed in the given time
+    private long lastConnectionListCheck = -1;
+    private long warnTimeout = -1;
+
+    // Handshake collected data
+    private final Map<String, SpamInfo> blocked = new HashMap<>(); // blocked during uptime
+    private Set<String> configuredBlockedIps; // configured to be blocked
+    private boolean usernameCheckEnabled;
+
+    public void reload() {
+        connections.clear();
+
+        File file = new File("connection-spam-config.yml");
+        if (!file.exists()) {
+            usernameCheckEnabled = false;
+            configuredBlockedIps = null;
+            connectionLimit = -1;
+            lastConnectionListCheck = -1;
+            return;
+        }
+
+        try {
+            Configuration config = YamlConfiguration.getProvider(YamlConfiguration.class).load(file);
+            usernameCheckEnabled = config.getBoolean("ip-blocker", false);
+            if (usernameCheckEnabled) {
+                configuredBlockedIps = new HashSet<>(config.getStringList("blocked-ips"));
+            } else {
+                configuredBlockedIps = null;
+            }
+
+            connectionLimit = config.getInt("connection-limit", 200);
+            connectionLimitSpan = config.getLong("connection-limit-millis", 10_000);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public boolean isConfigBlocked(String address) {
+        return configuredBlockedIps.contains(address);
+    }
+
+    public Map<String, SpamInfo> getBlocked() {
+        return blocked;
+    }
+
+    public boolean isUsernameCheckEnabled() {
+        return usernameCheckEnabled;
+    }
+
+    public boolean shouldBlockConnection() {
+        if (connectionLimit == -1) return false;
+
+        long currentTimeMillis = System.currentTimeMillis();
+        if (currentTimeMillis - lastConnectionListCheck > CHECK_CONNECTIONS_DELAY) {
+            // Remove outdated connection timestamps
+            lastConnectionListCheck = currentTimeMillis;
+            synchronized (connections) {
+                connections.removeIf(timestamp -> currentTimeMillis - timestamp > connectionLimitSpan);
+                connections.add(currentTimeMillis);
+            }
+        } else {
+            synchronized (connections) {
+                connections.add(currentTimeMillis);
+            }
+        }
+
+        final boolean block = connections.size() >= connectionLimit;
+        if (block && warnTimeout < currentTimeMillis) {
+            ProxyServer.getInstance().getLogger().warning("Connections in the last ~" + connectionLimitSpan + "ms (+-1500ms): " + connections.size());
+            warnTimeout = currentTimeMillis + WARN_DELAY;
+        }
+        return block;
+    }
+
+    public static final class SpamInfo {
+
+        private final Set<String> names = new HashSet<>();
+        private boolean killed;
+        private int connections = 1;
+        private long lastConnect = System.currentTimeMillis();
+
+        public SpamInfo(String firstName) {
+            names.add(firstName);
+        }
+
+        public Set<String> getNames() {
+            return names;
+        }
+
+        public void kill() {
+            this.killed = true;
+        }
+
+        public boolean isKilled() {
+            return killed;
+        }
+
+        public int getConnections() {
+            return connections;
+        }
+
+        public void incrementConnections() {
+            this.connections++;
+        }
+
+        public long getLastConnect() {
+            return lastConnect;
+        }
+
+        public void setLastConnect() {
+            this.lastConnect = System.currentTimeMillis();
+        }
+
+        @Override
+        public String toString() {
+            return "SpamInfo{" +
+                    "kill=" + killed +
+                    ", names=" + names +
+                    ", count=" + connections +
+                    '}';
+        }
+    }
+
+    public static BlockedConnections getInstance() {
+        return INSTANCE;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 9f4379a8..7c0f3e4c 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -362,18 +362,49 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         Preconditions.checkState( thisState == State.USERNAME, "Not expecting USERNAME" );
         this.loginRequest = loginRequest;
-
-        if ( getName().contains( "." ) )
-        {
-            disconnect( bungee.getTranslation( "name_invalid" ) );
+        // Luminu start - connection spam prevention
+        String name = getName();
+        // Moved together and with instant channel close
+        // There are people with 1 and 2 character usernames, but they are unlikely to ever join
+        if (name.length() < 3 || name.length() > 16 || name.indexOf('.') != -1) {
+            ch.close();
             return;
         }
 
-        if ( getName().length() > 16 )
-        {
-            disconnect( bungee.getTranslation( "name_too_long" ) );
-            return;
+        BlockedConnections blockedConnections = BlockedConnections.getInstance();
+        if (blockedConnections.isUsernameCheckEnabled()) {
+            String hostName = getAddress().toString();
+            int index = hostName.indexOf(':');
+            hostName = index != -1 ? hostName.substring(0, index) : hostName;
+            // Config blocked
+            if (blockedConnections.isConfigBlocked(hostName)) {
+                ch.close();
+                return;
+            }
+
+            BlockedConnections.SpamInfo count = blockedConnections.getBlocked().get(hostName);
+            if (count == null) {
+                // Create new
+                blockedConnections.getBlocked().put(hostName, new BlockedConnections.SpamInfo(name));
+            } else {
+                count.incrementConnections();
+                if (count.isKilled()) {
+                    // Close instantly
+                    ch.close();
+                    return;
+                }
+                if (count.getNames().add(name) && count.getNames().size() > 2) {
+                    // More than 2 different names over one ip = kill
+                    count.kill();
+                    ch.close();
+                    bungee.getLogger().warning("KILLED: " + count.getNames());
+                    return;
+                }
+
+                count.setLastConnect();
+            }
         }
+        // Luminu end
 
         int limit = BungeeCord.getInstance().config.getPlayerLimit();
         if ( limit > 0 && bungee.getOnlineCount() > limit )
@@ -466,7 +497,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 } else
                 {
                     disconnect( bungee.getTranslation( "mojang_fail" ) );
-                    bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
+                    bungee.getLogger().log(Level.SEVERE, "AUTH: " + getName() + "-" + getAddress()); // Luminu - connection spam prevention
                 }
             }
         };
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 9a39f69e..5de861c9 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -58,6 +58,12 @@ public class PipelineUtils
         @Override
         protected void initChannel(Channel ch) throws Exception
         {
+            // Luminu start - connection spam prevention
+            if (net.md_5.bungee.connection.BlockedConnections.getInstance().shouldBlockConnection()) {
+                ch.close();
+                return;
+            }
+            // Luminu end
             SocketAddress remoteAddress = ( ch.remoteAddress() == null ) ? ch.parent().localAddress() : ch.remoteAddress();
 
             if ( BungeeCord.getInstance().getConnectionThrottle() != null && BungeeCord.getInstance().getConnectionThrottle().throttle( remoteAddress ) )
-- 
2.26.0.windows.1

