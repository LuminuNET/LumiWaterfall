From a5561a2bcc99941afb782c2b9e4916b7b84b213d Mon Sep 17 00:00:00 2001
From: KennyTV <kennytv@t-online.de>
Date: Sat, 21 Mar 2020 19:50:42 +0100
Subject: [PATCH] Connection spam prevention


diff --git a/proxy/pom.xml b/proxy/pom.xml
index 912e50f4..9090997a 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -120,6 +120,15 @@
             <scope>runtime</scope>
         </dependency>
         <!-- Waterfall end -->
+
+        <!-- Luminu start - GeoLite database -->
+        <dependency>
+            <groupId>com.maxmind.geoip2</groupId>
+            <artifactId>geoip2</artifactId>
+            <version>2.13.1</version>
+            <scope>compile</scope>
+        </dependency>
+        <!-- Luminu end -->
     </dependencies>
 
     <build>
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index c343b5a2..b79096c2 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -231,6 +231,7 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandIP() );
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
+        getPluginManager().registerCommand(null, new net.md_5.bungee.command.CommandSpamFilter()); // Luminu - connection spam prevention
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java b/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java
new file mode 100644
index 00000000..860e505b
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandSpamFilter.java
@@ -0,0 +1,39 @@
+package net.md_5.bungee.command;
+
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.connection.BlockedConnections;
+
+import java.io.IOException;
+
+// Luminu - connection spam prevention
+public final class CommandSpamFilter extends Command {
+
+    public CommandSpamFilter() {
+        super("spamfilter", "command.spamfilter");
+        try {
+            BlockedConnections.getInstance().reload();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args) {
+        BlockedConnections blockedConnections = BlockedConnections.getInstance();
+        if (args.length == 0) {
+            sender.sendMessage("/spamfilter <reload>");
+        } else if (args.length == 1) {
+            switch (args[0]) {
+                case "reload":
+                    try {
+                        blockedConnections.reload();
+                        sender.sendMessage("reloaded");
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                    break;
+            }
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java b/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java
new file mode 100644
index 00000000..c9cc8df5
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/connection/BlockedConnections.java
@@ -0,0 +1,141 @@
+package net.md_5.bungee.connection;
+
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.maxmind.geoip2.DatabaseReader;
+import com.maxmind.geoip2.exception.AddressNotFoundException;
+import com.maxmind.geoip2.exception.GeoIp2Exception;
+import com.maxmind.geoip2.model.CountryResponse;
+import com.maxmind.geoip2.record.Country;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.TimeUnit;
+
+// Luminu - connection spam prevention
+public final class BlockedConnections {
+
+    private static final BlockedConnections INSTANCE = new BlockedConnections();
+    private static final long WARN_DELAY = 3000;
+    private static final long CHECK_CONNECTIONS_DELAY = 1500;
+
+    private final List<Long> connections = new ArrayList<>();
+    private long connectionLimitSpan; // timespan to limit connections in
+    private int connectionLimit = -1; // how many connections are allowed in the given time
+    private long lastConnectionListCheck = -1;
+    private long warnTimeout = -1;
+
+    private Set<String> allowedCountryCodes;
+    private LoadingCache<InetAddress, Boolean> geoLiteCache;
+    private DatabaseReader geoLiteReader;
+    private boolean enableGeoLiteLookups;
+    private long blockedViaGeoLite;
+
+    public void reload() throws IOException {
+        enableGeoLiteLookups = false;
+        connectionLimit = -1;
+        connections.clear();
+        lastConnectionListCheck = -1;
+
+        File file = new File("connection-spam-config.yml");
+        if (!file.exists()) return;
+
+        Configuration config = YamlConfiguration.getProvider(YamlConfiguration.class).load(file);
+        connectionLimit = config.getInt("connection-limit", 200);
+        connectionLimitSpan = config.getLong("connection-limit-millis", 10_000);
+
+        enableGeoLiteLookups = config.getBoolean("enable-geolite-checks", false);
+        File database;
+        if (enableGeoLiteLookups && (database = new File("GeoLite2-Country.mmdb")).exists()) {
+            allowedCountryCodes = new HashSet<>(config.getStringList("allowed-country-codes"));
+            geoLiteReader = new DatabaseReader.Builder(database).build();
+            geoLiteCache = CacheBuilder.newBuilder().expireAfterAccess(5, TimeUnit.MINUTES).concurrencyLevel(Runtime.getRuntime().availableProcessors()).initialCapacity(100).maximumSize(35_000).build(new CacheLoader<InetAddress, Boolean>() {
+                @Override
+                public Boolean load(InetAddress address) throws Exception {
+                    CountryResponse response = null;
+                    try {
+                        response = geoLiteReader.country(address);
+                    } catch (AddressNotFoundException ignored) {
+                    } catch (IOException | GeoIp2Exception e) {
+                        e.printStackTrace();
+                    }
+
+                    if (response == null) return false;
+
+                    Country country = response.getCountry();
+                    return !allowedCountryCodes.contains(country.getIsoCode());
+                }
+            });
+        } else {
+            if (geoLiteCache != null) {
+                geoLiteCache.invalidateAll();
+                geoLiteCache = null;
+            }
+        }
+    }
+
+    public boolean shouldBlockConnection(final SocketAddress socketAddress) {
+        if (!enableGeoLiteLookups && connectionLimit == -1) return false;
+
+        // Add to last connections
+        long currentTimeMillis = System.currentTimeMillis();
+        if (currentTimeMillis - lastConnectionListCheck > CHECK_CONNECTIONS_DELAY) {
+            // Remove outdated connection timestamps
+            lastConnectionListCheck = currentTimeMillis;
+            synchronized (connections) {
+                connections.removeIf(timestamp -> currentTimeMillis - timestamp > connectionLimitSpan);
+                connections.add(currentTimeMillis);
+            }
+        } else {
+            synchronized (connections) {
+                connections.add(currentTimeMillis);
+            }
+        }
+
+        // GeoLite check
+        if (enableGeoLiteLookups && socketAddress instanceof InetSocketAddress) {
+            InetAddress address = ((InetSocketAddress) socketAddress).getAddress();
+            try {
+                if (geoLiteCache.get(address)) {
+                    blockedViaGeoLite++;
+                    if (warnTimeout < currentTimeMillis) {
+                        ProxyServer.getInstance().getLogger().warning("Connections in the last ~" + connectionLimitSpan + "ms (+-1500ms): " + connections.size()
+                                + " (blocked via GeoLite since uptime: " + blockedViaGeoLite + ")");
+                        warnTimeout = currentTimeMillis + WARN_DELAY;
+                    }
+                    return true;
+                }
+            } catch (ExecutionException e) {
+                e.printStackTrace();
+            }
+        }
+
+        // Connection limit check
+        if (connectionLimit != -1 && connections.size() >= connectionLimit) {
+            if (warnTimeout < currentTimeMillis) {
+                ProxyServer.getInstance().getLogger().warning("Connections in the last ~" + connectionLimitSpan + "ms (+-1500ms): " + connections.size());
+                warnTimeout = currentTimeMillis + WARN_DELAY;
+            }
+            return true;
+        }
+
+        return false;
+    }
+
+
+    public static BlockedConnections getInstance() {
+        return INSTANCE;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 9f4379a8..75363cf6 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -362,18 +362,15 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         Preconditions.checkState( thisState == State.USERNAME, "Not expecting USERNAME" );
         this.loginRequest = loginRequest;
-
-        if ( getName().contains( "." ) )
-        {
-            disconnect( bungee.getTranslation( "name_invalid" ) );
-            return;
-        }
-
-        if ( getName().length() > 16 )
-        {
-            disconnect( bungee.getTranslation( "name_too_long" ) );
+        // Luminu start - connection spam prevention
+        String name = getName();
+        // Moved together and with instant channel close
+        // There are people with 1 and 2 character usernames, but they are unlikely to ever join
+        if (name.length() < 3 || name.length() > 16 || name.indexOf('.') != -1) {
+            ch.close();
             return;
         }
+        // Luminu end
 
         int limit = BungeeCord.getInstance().config.getPlayerLimit();
         if ( limit > 0 && bungee.getOnlineCount() > limit )
@@ -466,7 +463,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 } else
                 {
                     disconnect( bungee.getTranslation( "mojang_fail" ) );
-                    bungee.getLogger().log( Level.SEVERE, "Error authenticating " + getName() + " with minecraft.net", error );
+                    bungee.getLogger().log(Level.SEVERE, "AUTH: " + getName() + "-" + getAddress()); // Luminu - connection spam prevention
                 }
             }
         };
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 9a39f69e..5614fed1 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -59,6 +59,12 @@ public class PipelineUtils
         protected void initChannel(Channel ch) throws Exception
         {
             SocketAddress remoteAddress = ( ch.remoteAddress() == null ) ? ch.parent().localAddress() : ch.remoteAddress();
+            // Luminu start - connection spam prevention
+            if (net.md_5.bungee.connection.BlockedConnections.getInstance().shouldBlockConnection(remoteAddress)) {
+                ch.close();
+                return;
+            }
+            // Luminu end
 
             if ( BungeeCord.getInstance().getConnectionThrottle() != null && BungeeCord.getInstance().getConnectionThrottle().throttle( remoteAddress ) )
             {
-- 
2.26.0.windows.1

